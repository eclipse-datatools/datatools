/* Generated By:JJTree&JavaCC: Do not edit this line. IngresSQLParserTokenManager.java */
package org.eclipse.datatools.enablement.ingres.internal.ui.parser;
import org.eclipse.datatools.sqltools.sql.parser.Token;
import org.eclipse.datatools.sqltools.sql.parser.TokenMgrError;

public class IngresSQLParserTokenManager implements IngresSQLParserConstants
{
            int commentNestingDepth = 0 ;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0xf800000000000000L) != 0L || (active2 & 0xffL) != 0L)
         {
            jjmatchedKind = 164;
            return 76;
         }
         if ((active0 & 0x7ffc000000L) != 0L)
         {
            jjmatchedKind = 164;
            return 123;
         }
         if ((active2 & 0xc000000L) != 0L)
            return 10;
         if ((active0 & 0x1ff8000000000L) != 0L)
         {
            jjmatchedKind = 164;
            return 53;
         }
         if ((active1 & 0xf000000L) != 0L)
         {
            jjmatchedKind = 164;
            return 55;
         }
         if ((active0 & 0xfffe000003ffc000L) != 0L || (active1 & 0x7fffffff0fffffeL) != 0L || (active2 & 0x3ffff00L) != 0L)
         {
            jjmatchedKind = 164;
            return 140;
         }
         if ((active2 & 0x20000000000000L) != 0L)
            return 141;
         return -1;
      case 1:
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active1 & 0x3000000L) != 0L)
            return 142;
         if ((active0 & 0x21c0000L) != 0L || (active1 & 0xcf0003fe0L) != 0L || (active2 & 0x400L) != 0L)
            return 140;
         if ((active0 & 0xffffbfffcde3c000L) != 0L || (active1 & 0x1ffffff30cffc01eL) != 0L || (active2 & 0x3fffbf8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 1;
            }
            return 140;
         }
         if ((active1 & 0xe000000000000000L) != 0L || (active2 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 1;
            }
            return 75;
         }
         if ((active0 & 0x30000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 1;
            }
            return 122;
         }
         return -1;
      case 2:
         if ((active0 & 0xe7fbfffffda08000L) != 0L || (active1 & 0xffffffcb8c9f6f9eL) != 0L || (active2 & 0x3fffbbbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 2;
            }
            return 140;
         }
         if ((active0 & 0x18040000004b4000L) != 0L || (active1 & 0x3022608000L) != 0L || (active2 & 0x44L) != 0L)
            return 140;
         return -1;
      case 3:
         if ((active0 & 0xe0c3900008000000L) != 0L || (active1 & 0xe4101818c0d4802L) != 0L || (active2 & 0x3310010L) != 0L)
            return 140;
         if ((active0 & 0x17386ffff5a08000L) != 0L || (active1 & 0xf1befe6a0092279cL) != 0L || (active2 & 0xcefbabL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 3;
            }
            return 140;
         }
         return -1;
      case 4:
         if ((active0 & 0x95b86ff785200000L) != 0L || (active1 & 0xf1beef6208902710L) != 0L || (active2 & 0xceaabL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 164;
               jjmatchedPos = 4;
            }
            return 140;
         }
         if ((active0 & 0x200000870808000L) != 0L || (active1 & 0x10080002008cL) != 0L || (active2 & 0xc21100L) != 0L)
            return 140;
         return -1;
      case 5:
         if ((active0 & 0x118485100000000L) != 0L || (active1 & 0x9034802208800110L) != 0L || (active2 & 0x4a008L) != 0L)
            return 140;
         if ((active0 & 0x94a027a6a5200000L) != 0L || (active1 & 0x618a6f4000102600L) != 0L || (active2 & 0x84aa3L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
            return 140;
         }
         return -1;
      case 6:
         if ((active0 & 0x1080072005000000L) != 0L || (active1 & 0x460000000000L) != 0L || (active2 & 0x80082L) != 0L)
            return 140;
         if ((active0 & 0x84202086a0200000L) != 0L || (active1 & 0x618a294000102600L) != 0L || (active2 & 0x4a21L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 6;
            return 140;
         }
         return -1;
      case 7:
         if ((active0 & 0x420000220200000L) != 0L || (active1 & 0x600a294000002600L) != 0L || (active2 & 0x4a20L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 7;
            return 140;
         }
         if ((active0 & 0x8000208480000000L) != 0L || (active1 & 0x180000000100000L) != 0L || (active2 & 0x1L) != 0L)
            return 140;
         return -1;
      case 8:
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x214000002600L) != 0L || (active2 & 0x200L) != 0L)
            return 140;
         if ((active0 & 0x400000220200000L) != 0L || (active1 & 0x600a080000000000L) != 0L || (active2 & 0x4820L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 8;
            return 140;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000220000000L) != 0L || (active1 & 0xa080000000000L) != 0L || (active2 & 0x20L) != 0L)
            return 140;
         if ((active0 & 0x200000L) != 0L || (active1 & 0x6000000000000000L) != 0L || (active2 & 0x4800L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 9;
            return 140;
         }
         return -1;
      case 10:
         if ((active2 & 0x4800L) != 0L)
            return 140;
         if ((active0 & 0x200000L) != 0L || (active1 & 0x6000000000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 10;
            return 140;
         }
         return -1;
      case 11:
         if ((active0 & 0x200000L) != 0L || (active1 & 0x6000000000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 11;
            return 140;
         }
         return -1;
      case 12:
         if ((active0 & 0x200000L) != 0L)
            return 140;
         if ((active1 & 0x6000000000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 12;
            return 140;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 207;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x2000000000000000L, 0x30000L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc000000L, 0x0L);
      case 37:
         jjmatchedKind = 214;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000000L, 0x0L);
      case 38:
         return jjStopAtPos(0, 212);
      case 40:
         jjmatchedKind = 191;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 192);
      case 42:
         jjmatchedKind = 193;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40L);
      case 43:
         return jjStopAtPos(0, 195);
      case 44:
         return jjStopAtPos(0, 179);
      case 45:
         jjmatchedKind = 196;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 181, 141);
      case 47:
         jjmatchedKind = 194;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 206);
      case 59:
         return jjStopAtPos(0, 180);
      case 60:
         jjmatchedKind = 184;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000000000L, 0x40000L);
      case 61:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80L);
      case 62:
         jjmatchedKind = 186;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000000L, 0x100L);
      case 63:
         return jjStopAtPos(0, 197);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L, 0x0L);
      case 94:
         return jjStopAtPos(0, 213);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7fc000L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3800000L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7ffc000000L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1ff8000000000L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1fe000000000000L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xfe00000000000000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xeL, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fe0L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff0000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff000000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0xffL, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf00L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3f000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c0000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3e00000L, 0x0L);
      case 124:
         jjmatchedKind = 211;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000L, 0x0L);
      case 126:
         return jjStopAtPos(0, 183);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L, active2, 0L, active3, 0L);
      case 42:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(1, 199);
         break;
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 45:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(1, 209);
         break;
      case 61:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 185);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 187);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 189);
         else if ((active3 & 0x40L) != 0L)
            return jjStopAtPos(1, 198);
         break;
      case 62:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         else if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(1, 208);
         else if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(1, 210);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800c000000L, active1, 0x800004000200010L, active2, 0xc0100L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001e0001800000L, active1, 0xe03f018000028000L, active2, 0x207L, active3, 0L);
      case 70:
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 140);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L, active2, 0xe00008L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200000000000L, active1, 0x450000L, active2, 0x9100000L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000040008000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000030000L, active1, 0x80000f80L, active2, 0x7000L, active3, 0L);
      case 79:
      case 111:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 138, 140);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800400f80000000L, active1, 0x3c0000002984002L, active2, 0x2000010L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300000000L, active2, 0x8000L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000801000000000L, active1, 0x7e080000000cL, active2, 0x40000000000800L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000080000L, active1, 0x2000L, active2, 0x30000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 140);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc001006000200000L, active1, 0x40080300c000000L, active2, 0x40L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f0000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 140);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L);
      case 124:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 178);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 190);
         break;
      case 94:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x1000000080004L, active2, 0x828L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0x4000100L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0x38020000000000L, active1, 0x6000000000100000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 140);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 140);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800800080L, active2, 0x8000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0011030000000L, active1, 0x20100000000L, active2, 0x710000L);
      case 70:
      case 102:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x2000000000000L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x1c0000004000L, active2, 0x823000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000000000L, active1, 0x84c000008c010000L, active2, 0x40000L);
      case 77:
      case 109:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0x1400100000000L, active1, 0x4000000000000L, active2, 0x210L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000600000000L, active1, 0L, active2, 0x8000080L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800040000000L, active1, 0x8600000002008L, active2, 0x40000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000006000000000L, active1, 0x1c000000000L, active2, 0x2080000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x230000c000000L, active1, 0x100L, active2, 0x2L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 140);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 130, 140);
         return jjMoveStringLiteralDfa3_0(active0, 0x200008001208000L, active1, 0x10002200000e02L, active2, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x820000000020010L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300000000000000L, active2, 0L);
      case 88:
      case 120:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 140);
         break;
      case 89:
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 140);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 140);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         break;
      case 65:
      case 97:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 154);
         return jjMoveStringLiteralDfa4_0(active0, 0x8449000000000L, active1, 0x100000L, active2, 0xc000L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 140);
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8280000034000000L, active1, 0x100200000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 140);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 140);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 140);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 140);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 140);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 140);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 140);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 140);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0x1010080000008000L, active1, 0x9002000800020780L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 72:
      case 104:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x200800010L, active2, 0L);
      case 75:
      case 107:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 153, 140);
         break;
      case 76:
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 140);
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x420020080000000L, active1, 0x80800008002000L, active2, 0x800100L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 140);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x50000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 140);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 140);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x100000000004L, active2, 0x20800L);
      case 79:
      case 111:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 140);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x24000000000000L, active2, 0x1080L);
      case 80:
      case 112:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 140);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x22000000000L, active2, 0x200L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 82:
      case 114:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x8000000000000L, active2, 0x400008L);
      case 83:
      case 115:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0x100004240000000L, active1, 0L, active2, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200400000000L, active1, 0x4000000000L, active2, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6010000000000008L, active2, 0x40001L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x80000000000L, active2, 0L);
      case 87:
      case 119:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0x40000000000000L);
      case 89:
      case 121:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 140);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20004000000L, active1, 0x70000002000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x80000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 140);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 136, 140);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 140);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0x12081000000L, active1, 0x200000000000L, active2, 0x40009L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x800000L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 145, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000400L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 140);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000600500000000L, active1, 0xc84008000000L, active2, 0x80022L);
      case 75:
      case 107:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x20000000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 140);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 140);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000200000L, active1, 0x100000200000000L, active2, 0x200L);
      case 80:
      case 112:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 140);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6012000000000300L, active2, 0x8004000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 140);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 140);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 140);
         return jjMoveStringLiteralDfa5_0(active0, 0x8100081200000000L, active1, 0x100000L, active2, 0x40000000008000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0040000000000L, active1, 0x2000000000L, active2, 0x2000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 88:
      case 120:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 140);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x400008000000000L, active1, 0x88000000000000L, active2, 0x800L);
      case 67:
      case 99:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 140);
         break;
      case 68:
      case 100:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x200000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 140);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 140);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 140);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 140);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 140);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 143, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x2000000000000L, active2, 0x8000000L);
      case 70:
      case 102:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 140);
         break;
      case 71:
      case 103:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x6000000000100000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x480000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 140);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 140);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x212400000000L, active1, 0x10000000000L, active2, 0x80001L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x20200200000L, active1, 0x60000000400L, active2, 0x200L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 140);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 146, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000080000000L, active1, 0x200L, active2, 0x20L);
      case 84:
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 140);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 140);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 140);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 140);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x4000002000L, active2, 0x4000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 140);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x40000000000080L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L, active2, 0x200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400200080000000L, active1, 0x80000000000000L, active2, 0x801L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 140);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 140);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 140);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 140);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 140);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x90000000200L, active2, 0L);
      case 71:
      case 103:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 140);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000200000L, active1, 0x4000002400L, active2, 0x4000L);
      case 77:
      case 109:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 135, 140);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 140);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 140);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 129, 140);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10a000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000020000000L, active1, 0x100000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000000000L);
      case 83:
      case 115:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 155);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 140);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 140);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 140);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6000000000000000L, active2, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0x200000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 140);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000200L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 140);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 140);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 140);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 128, 140);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(7, 182);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x220000000L, active1, 0x8000000000000L, active2, 0x20L);
      case 75:
      case 107:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 140);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 140);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 140);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000002000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0x200L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 140);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 140);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0x400L, active2, 0x4800L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x6000000000000000L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x6000000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 140);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 140);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2080000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4800L);
      case 78:
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 140);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 140);
         return jjMoveStringLiteralDfa9_0(active0, 0x220000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 140);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 140);
         break;
      case 89:
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 140);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 137, 140);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6000000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 115, 140);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4800L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 140);
         break;
      case 83:
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 107, 140);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 113, 140);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 133, 140);
         break;
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 140);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 140);
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 139, 140);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 142, 140);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 21, 140);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 126, 140);
         break;
      case 84:
      case 116:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 125, 140);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x2800000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 140;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 75:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 142:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(56, 62);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 122:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 55:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 53:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 157)
                        kind = 157;
                     jjCheckNAddTwoStates(91, 92);
                  }
                  break;
               case 52:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 123:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 156)
                        kind = 156;
                     jjCheckNAddStates(4, 12);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 18);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(91, 11);
                  else if (curChar == 35)
                     jjCheckNAdd(38);
                  else if (curChar == 36)
                     jjAddStates(19, 20);
                  else if (curChar == 39)
                     jjCheckNAddStates(21, 23);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 76:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 140:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  else if (curChar == 58)
                  {
                     if (kind > 168)
                        kind = 168;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  break;
               case 1:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 2:
                  if (curChar == 39)
                     jjCheckNAddStates(24, 26);
                  break;
               case 3:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 5:
                  if (curChar == 39 && kind > 159)
                     kind = 159;
                  break;
               case 6:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 36)
                     jjAddStates(19, 20);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddStates(0, 3);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar != 46)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 31:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar == 35)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 56:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(56, 62);
                  break;
               case 65:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAddStates(4, 12);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar != 46)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(91, 11);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  jjCheckNAdd(94);
                  break;
               case 95:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 18);
                  break;
               case 96:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 97:
                  if (curChar == 34)
                     jjCheckNAddStates(36, 38);
                  break;
               case 98:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 100:
                  if (curChar == 34 && kind > 160)
                     kind = 160;
                  break;
               case 101:
                  if ((0xf7ffffeb00000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 102:
                  if (curChar == 34)
                     jjCheckNAddStates(42, 44);
                  break;
               case 103:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0xf7fffffb00000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 105:
                  if (curChar == 34 && kind > 177)
                     kind = 177;
                  break;
               case 108:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(108);
                  break;
               case 110:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if (curChar == 58 && kind > 168)
                     kind = 168;
                  break;
               case 114:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 125:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 75:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 142:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  break;
               case 122:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 55:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 53:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 123:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddStates(52, 56);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 91)
                     jjCheckNAdd(27);
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(57, 58);
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 64)
                     jjCheckNAdd(31);
                  break;
               case 76:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 140:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  break;
               case 1:
                  jjCheckNAddStates(21, 23);
                  break;
               case 4:
                  jjCheckNAddStates(24, 26);
                  break;
               case 7:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAdd(8);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 26:
                  if (curChar == 91)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 28:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 93 && kind > 165)
                     kind = 165;
                  break;
               case 30:
                  if (curChar == 64)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar == 64)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 38:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if ((0x400000004000L & l) != 0L && kind > 201)
                     kind = 201;
                  break;
               case 42:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 51:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L && kind > 202)
                     kind = 202;
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 64:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L && kind > 203)
                     kind = 203;
                  break;
               case 67:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 96:
                  jjCheckNAddStates(33, 35);
                  break;
               case 99:
                  jjCheckNAddStates(36, 38);
                  break;
               case 101:
                  if ((0x7ffffffed7ffffffL & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 104:
                  if ((0x7ffffffed7ffffffL & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddStates(52, 56);
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(108);
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 110:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 112:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 113:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 115:
                  if ((0x8000000080L & l) != 0L && kind > 204)
                     kind = 204;
                  break;
               case 116:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 124:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if ((0x8000000080L & l) != 0L && kind > 205)
                     kind = 205;
                  break;
               case 127:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 134:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 75:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 142:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 122:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 55:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 53:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 52:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 123:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 20);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddStates(52, 56);
                  }
                  break;
               case 76:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 140:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAddTwoStates(107, 108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(108);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(21, 23);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(24, 26);
                  break;
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 20);
                  break;
               case 27:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(65, 67);
                  break;
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 31:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(35);
                  break;
               case 38:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 96:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 99:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(36, 38);
                  break;
               case 101:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(39, 41);
                  break;
               case 104:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(42, 44);
                  break;
               case 106:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddStates(52, 56);
                  break;
               case 107:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(108);
                  break;
               case 109:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(49, 51);
                  break;
               case 110:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(110, 111);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 140 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x800L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   16, 17, 22, 23, 79, 80, 81, 86, 87, 16, 17, 22, 23, 96, 98, 100, 
   101, 103, 105, 10, 15, 1, 3, 5, 3, 4, 5, 28, 29, 40, 49, 65, 
   74, 96, 98, 100, 98, 99, 100, 101, 103, 105, 103, 104, 105, 114, 121, 125, 
   132, 109, 110, 111, 107, 108, 109, 110, 111, 123, 139, 13, 14, 20, 21, 24, 
   25, 27, 28, 29, 84, 85, 88, 89, 93, 94, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec1[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         if ((jjbitVec2[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\41\45\136\46", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\174\174", "\54", 
"\73", "\56", null, "\176", "\74", "\74\75", "\76", "\76\75", "\75", "\41\75", 
"\50\53\51", "\50", "\51", "\52", "\57", "\53", "\55", "\77", "\52\75", "\75\52", "\76\76", 
null, null, null, null, null, "\72", "\41", "\41\76", "\41\74", "\74\76", "\174", 
"\46", "\136", "\45", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xffffffffffffffffL, 0xfffe07bbbfffffffL, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x8beL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x880L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1740L, 0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[140];
private final int[] jjstateSet = new int[280];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public IngresSQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public IngresSQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 140; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 11 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestingDepth -= 1;
            SwitchTo( commentNestingDepth==0 ? DEFAULT : IN_MULTI_LINE_COMMENT );
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 9 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         commentNestingDepth = 1 ;
         break;
      case 10 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                    commentNestingDepth += 1 ;
         break;
      default : 
         break;
   }
}
}
