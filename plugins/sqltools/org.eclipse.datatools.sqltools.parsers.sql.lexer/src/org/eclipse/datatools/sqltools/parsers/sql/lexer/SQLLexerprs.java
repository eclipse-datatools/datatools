/*
 * This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License 2.0
 * which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 */

package org.eclipse.datatools.sqltools.parsers.sql.lexer;

public class SQLLexerprs implements lpg.lpgjavaruntime.ParseTable, SQLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,2,2,4,3,2,1,2,
            3,2,1,2,1,1,1,1,2,3,
            1,2,2,2,1,2,2,3,2,3,
            3,6,1,0,3,3,2,0,1,2,
            3,2,0,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,2,2,2,2,2,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,1,1,1,1,1,1,1,
            1,1,2,1,1,3,3,1,2,1,
            1,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            23,23,24,24,24,24,24,24,24,24,
            24,24,24,24,24,24,31,25,39,39,
            12,13,13,11,11,11,36,26,26,14,
            14,40,40,41,41,27,27,42,5,5,
            43,44,44,28,28,28,45,45,45,17,
            17,17,29,10,10,46,46,46,46,47,
            47,30,49,49,4,4,4,4,4,2,
            2,2,2,2,2,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,1,1,1,1,1,1,1,1,1,
            1,19,19,19,19,19,19,16,16,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,51,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            48,48,48,48,18,18,18,18,8,8,
            50,50,50,50,50,50,50,50,50,15,
            15,15,15,15,6,6,6,6,6,6,
            6,6,6,9,32,32,32,32,33,34,
            35,37,37,37,321,38,23,69,21,461,
            870,25,24,69,8,320,53,332,915,25,
            24,69,1174,1108,39,398,22,355,1,2,
            3,4,5,6,7,9,10,11,12,13,
            14,15,16,17,19,887,35,36,966,358,
            1,295,294,69,685,135,29,296,298,299,
            161,295,294,69,390,43,29,296,298,299,
            961,401,1130,39,408,400,290,289,69,292,
            81,295,294,69,1141,39,30,296,298,299,
            33,556,275,274,69,277,1177,291,241,295,
            294,69,1184,443,30,296,298,299,1189,57,
            1062,38,276,1152,39,333,427,478,290,289,
            69,292,792,271,270,69,273,714,275,274,
            69,277,34,634,281,280,69,1185,437,291,
            1005,117,272,1085,960,55,23,69,276,1084,
            1181,1039,39,284,21,328,41,1022,117,118,
            52,888,53,332,1051,38,1073,38,44,382,
            56,394,1187,42,1119,38,118,1119,38,423,
            1163,39,490,62,467,1186,1088,1176,1089,1178,
            1183,1175,1179,1182,506,506
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,0,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,0,0,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,0,77,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,0,0,19,0,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,0,0,19,0,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,0,
            0,0,0,76,0,0,80,0,0,0,
            11,12,13,14,15,16,11,0,19,19,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,0,1,
            2,3,4,5,6,7,8,9,10,11,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,0,0,0,0,0,0,
            0,0,0,55,0,0,0,0,0,0,
            50,18,18,20,17,17,56,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,17,0,0,18,17,20,0,17,0,
            0,18,0,20,0,0,18,0,20,0,
            0,0,0,0,0,0,0,0,0,46,
            47,45,49,48,51,52,46,47,45,49,
            48,51,52,45,57,58,50,53,0,54,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            506,607,608,609,610,611,612,613,614,615,
            616,585,581,582,583,584,586,498,771,604,
            770,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,602,603,605,606,
            576,580,579,578,577,769,807,808,773,803,
            746,784,785,761,766,768,745,748,749,772,
            774,755,752,753,754,756,757,758,759,760,
            762,763,764,765,767,747,750,751,775,806,
            506,607,608,609,610,611,612,613,614,615,
            616,585,581,582,583,584,586,501,771,604,
            770,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,602,603,605,606,
            576,580,579,578,577,769,807,808,773,803,
            746,784,785,761,766,768,745,748,749,772,
            774,755,752,753,754,756,757,758,759,760,
            762,763,764,765,767,747,750,751,775,806,
            506,607,608,609,610,611,612,613,614,615,
            616,585,581,582,583,584,586,502,771,604,
            770,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,602,603,605,606,
            576,580,579,578,577,769,807,808,773,803,
            746,784,785,761,766,768,745,748,749,772,
            774,755,752,753,754,756,757,758,759,760,
            762,763,764,765,767,747,750,751,775,806,
            506,607,608,609,610,611,612,613,614,615,
            616,585,581,582,583,584,586,503,771,604,
            770,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,602,603,605,606,
            576,580,579,578,577,769,807,808,773,803,
            746,784,785,761,766,768,745,748,749,772,
            774,755,752,753,754,756,757,758,759,760,
            762,763,764,765,767,747,750,751,775,806,
            54,380,608,609,610,611,612,613,614,615,
            616,585,581,582,583,584,586,360,632,496,
            453,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,602,603,605,606,
            576,580,579,578,577,459,573,574,385,570,
            482,571,572,447,495,420,625,630,631,816,
            454,637,418,819,412,638,406,634,635,629,
            817,818,810,811,633,471,627,58,814,506,
            607,608,609,610,611,612,613,614,615,616,
            585,581,582,583,584,586,730,742,604,741,
            587,588,589,590,591,592,593,594,595,596,
            597,598,599,600,601,602,603,605,606,576,
            580,579,578,577,740,573,574,497,570,716,
            571,572,732,737,739,715,718,719,743,744,
            725,722,723,724,726,727,728,729,731,733,
            734,735,736,738,717,720,721,506,607,608,
            609,610,611,612,613,614,615,616,585,581,
            582,583,584,586,730,742,604,741,587,588,
            589,590,591,592,593,594,595,596,597,598,
            599,600,601,602,603,605,606,576,580,579,
            578,577,740,573,574,500,570,716,571,572,
            732,737,739,715,718,719,743,744,725,722,
            723,724,726,727,728,729,731,733,734,735,
            736,738,717,720,721,506,607,608,609,610,
            611,612,613,614,615,616,585,581,582,583,
            584,586,699,711,604,710,587,588,589,590,
            591,592,593,594,595,596,597,598,599,600,
            601,602,603,605,606,576,580,579,578,577,
            709,573,574,713,570,687,571,572,701,706,
            708,686,688,689,712,714,694,691,692,693,
            695,696,697,698,700,702,703,704,705,707,
            432,565,690,61,607,608,609,610,611,612,
            613,614,615,616,585,581,582,583,584,586,
            670,682,604,681,587,588,589,590,591,592,
            593,594,595,596,597,598,599,600,601,602,
            603,605,606,576,580,579,578,577,680,791,
            792,684,788,657,63,506,672,677,679,656,
            659,660,683,685,665,662,663,664,666,667,
            668,669,671,673,674,675,676,678,658,789,
            661,794,793,506,607,608,609,610,611,612,
            613,614,615,616,585,581,582,583,584,586,
            699,711,604,710,587,588,589,590,591,592,
            593,594,595,596,597,598,599,600,601,602,
            603,605,606,576,580,579,578,577,709,573,
            574,713,570,687,571,572,701,706,708,686,
            688,689,712,714,694,691,692,693,695,696,
            697,698,700,702,703,704,705,707,460,566,
            690,506,607,608,609,610,611,612,613,614,
            615,616,585,581,582,583,584,586,670,682,
            604,681,587,588,589,590,591,592,593,594,
            595,596,597,598,599,600,601,602,603,605,
            606,576,580,579,578,577,680,573,574,684,
            570,657,571,572,672,677,679,656,659,660,
            683,685,665,662,663,664,666,667,668,669,
            671,673,674,675,676,678,658,506,661,18,
            607,608,609,610,611,612,613,614,615,616,
            585,581,582,583,584,586,506,122,604,506,
            587,588,589,590,591,592,593,594,595,596,
            597,598,599,600,601,602,603,605,606,576,
            580,579,578,577,309,607,608,609,610,611,
            612,613,614,615,616,585,581,582,583,584,
            586,506,506,604,506,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            602,603,605,606,576,580,579,578,577,506,
            101,506,506,335,506,45,505,506,506,506,
            585,581,582,583,584,586,474,506,604,450,
            587,588,589,590,591,592,593,594,595,596,
            597,598,599,600,601,602,603,605,606,576,
            580,579,578,577,506,607,608,609,610,611,
            612,613,614,615,616,621,617,618,619,620,
            622,40,607,608,609,610,611,612,613,614,
            615,616,621,617,618,619,620,622,37,607,
            608,609,610,611,612,613,614,615,616,474,
            506,607,608,609,610,611,612,613,614,615,
            616,149,607,608,609,610,611,612,613,614,
            615,616,47,607,608,609,610,611,612,613,
            614,615,616,133,134,506,506,98,28,506,
            506,506,506,476,506,506,506,506,506,506,
            487,642,643,644,370,809,484,46,607,608,
            609,610,611,612,613,614,615,616,506,607,
            608,609,610,611,612,613,614,615,616,49,
            607,608,609,610,611,612,613,614,615,616,
            48,607,608,609,610,611,612,613,614,615,
            616,51,607,608,609,610,611,612,613,614,
            615,616,50,607,608,609,610,611,612,613,
            614,615,616,20,27,32,506,506,506,506,
            54,26,31,506,506,130,120,506,506,506,
            506,809,506,506,652,809,653,506,809,506,
            506,649,506,650,506,506,646,506,647,506,
            506,506,506,506,506,506,506,506,506,573,
            574,654,570,799,571,572,573,574,651,570,
            799,571,572,648,812,813,364,645,506,499
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 51,
           NT_OFFSET         = 80,
           LA_STATE_OFFSET   = 819,
           MAX_LA            = 1,
           NUM_RULES         = 313,
           NUM_NONTERMINALS  = 52,
           NUM_SYMBOLS       = 132,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 314,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 81,
           ACCEPT_ACTION     = 505,
           ERROR_ACTION      = 506;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
